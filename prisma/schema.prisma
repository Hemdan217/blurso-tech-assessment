// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  EMPLOYEE
}

enum TaskStatus {
  PENDING
  IN_PROGRESS
  DONE
}

enum TaskPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum NotificationType {
  TASK_ASSIGNMENT
  TASK_UPDATE
  STATUS_CHANGE
  GENERAL
}

model User {
  id        String   @id @default(cuid())
  name      String
  email     String   @unique
  password  String
  role      Role
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  employee      Employee?
  taskActions   TaskAction[]
  notifications Notification[]

  @@index([email])
}

model Employee {
  id             String   @id @default(cuid())
  employeeId     String   @unique
  employmentDate DateTime
  basicSalary    Int
  isActive       Boolean  @default(true)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  userId    String  @unique
  user      User    @relation(fields: [userId], references: [id])
  salaries  Salary[]
  tasks     Task[]

  @@index([employeeId])
  @@index([userId])
}

model Salary {
  id          String   @id @default(cuid())
  employeeId  String
  month       DateTime
  baseSalary  Int
  payable     Int
  changes     Json     // Array of { value: number, type: "DEDUCTION" | "BONUS", note: string }
  isPaid      Boolean  @default(false)
  createdAt   DateTime @default(now())

  employee    Employee @relation(fields: [employeeId], references: [id])

  @@index([employeeId])
  @@index([month])
}

model Project {
  id          String   @id @default(cuid())
  name        String
  description String?
  isArchived  Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  tasks     Task[]

  @@index([name])
}

model Task {
  id           String     @id @default(cuid())
  title        String
  description  String?
  status       TaskStatus @default(PENDING)
  dueDate      DateTime?
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  assignedToId String
  projectId    String
  employee     Employee   @relation(fields: [assignedToId], references: [id])
  project      Project    @relation(fields: [projectId], references: [id])
  actions      TaskAction[]

  @@index([assignedToId])
  @@index([projectId])
  @@index([status])
}

model TaskAction {
  id          String   @id @default(cuid())
  description String
  note        String?
  oldStatus   TaskStatus?
  newStatus   TaskStatus?
  createdAt   DateTime @default(now())

  taskId      String
  userId      String
  task        Task     @relation(fields: [taskId], references: [id])
  user        User     @relation(fields: [userId], references: [id])

  @@index([taskId])
  @@index([userId])
}

model Notification {
  id          String           @id @default(cuid())
  title       String
  message     String
  type        NotificationType
  link        String
  isRead      Boolean          @default(false)
  createdAt   DateTime         @default(now())

  recipientId String
  recipient   User             @relation(fields: [recipientId], references: [id])

  @@index([recipientId])
  @@index([isRead])
}
